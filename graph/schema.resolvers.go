package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/vgekko/go-tasks-graphql/graph/model"
	"github.com/vgekko/go-tasks-graphql/internal/entity"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.TaskCreateInput) (*model.CreatePayload, error) {
	var createInput entity.TaskInput
	var createPayload model.CreatePayload

	createInput.Title = input.Title
	createInput.Description = input.Description

	id, err := r.Uc.Task.Create(createInput)
	r.Log.Info("new task id: ", id)
	if err != nil {
		r.Log.Error("graphql: ", err.Error())
		return nil, err
	}

	createPayload.ID = id
	return &createPayload, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.TaskUpdateInput) (*model.Error, error) {
	var updateInput entity.TaskInput

	updateInput.Title = input.Title
	updateInput.Description = input.Description

	if err := r.Uc.Task.Update(input.ID, updateInput); err != nil {
		r.Log.Error("graphql: ", err.Error())
		return &model.Error{Message: err.Error()}, err
	}

	return &model.Error{Message: "OK"}, nil
}

// CompleteTask is the resolver for the completeTask field.
func (r *mutationResolver) CompleteTask(ctx context.Context, input *model.TaskCompleteInput) (*model.Error, error) {
	if err := r.Uc.Task.Complete(input.ID); err != nil {
		r.Log.Error("graphql: ", err.Error())
		return &model.Error{Message: err.Error()}, err
	}

	return &model.Error{Message: "OK"}, nil
}

// ReopenTask is the resolver for the reopenTask field.
func (r *mutationResolver) ReopenTask(ctx context.Context, input *model.TaskReopenInput) (*model.Error, error) {
	if err := r.Uc.Task.Reopen(input.ID); err != nil {
		r.Log.Error("graphql: ", err.Error())
		return &model.Error{Message: err.Error()}, err
	}

	return &model.Error{Message: "OK"}, nil
}

// AllTasks is the resolver for the allTasks field.
func (r *queryResolver) AllTasks(ctx context.Context) ([]entity.Task, error) {
	allTasks, err := r.Uc.Task.GetAll()
	if err != nil {
		r.Log.Error("graphql: ", err.Error())
		return nil, err
	}

	return allTasks, nil
}

// TaskByID is the resolver for the taskByID field.
func (r *queryResolver) TaskByID(ctx context.Context, filter int) (*entity.Task, error) {
	task, err := r.Uc.Task.GetByID(filter)
	if err != nil {
		r.Log.Error("graphql: ", err.Error())
		return nil, err
	}

	return &task, nil
}

// CompletedTasks is the resolver for the completedTasks field.
func (r *queryResolver) CompletedTasks(ctx context.Context) ([]entity.Task, error) {
	completedTasks, err := r.Uc.GetCompleted()
	if err != nil {
		r.Log.Error("graphql: ", err.Error())
		return nil, err
	}

	return completedTasks, nil
}

// OpenedTasks is the resolver for the openedTasks field.
func (r *queryResolver) OpenedTasks(ctx context.Context) ([]entity.Task, error) {
	openedTasks, err := r.Uc.GetOpened()
	if err != nil {
		r.Log.Error("graphql: ", err.Error())
		return nil, err
	}

	return openedTasks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
